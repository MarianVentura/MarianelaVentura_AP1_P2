@page "/Combos/Edit/{id:int}"
@using MarianelaVentura_AP1_P2.Models
@using MarianelaVentura_AP1_P2.Services
@inject CombosService combosService
@inject CombosDetalleService combosDetalleService
@inject NavigationManager navigationManager

<PageTitle>Editar Combo</PageTitle>

<Toasts class="p-3 mt-5" Messages="messages" Placement="ToastsPlacement.TopRight" />

<EditForm Model="Combo" OnValidSubmit="Actualizar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Editar Combo</h5>
            </div>

            <div class="card-body">
                <!-- Fecha -->
                <div class="mb-3">
                    <label class="form-label"><strong>Fecha</strong></label>
                    <InputDate class="form-control" @bind-Value="Combo.Fecha" />
                </div>

                <!-- Descripción -->
                <div class="mb-3">
                    <label class="form-label"><strong>Descripción</strong></label>
                    <InputText class="form-control" @bind-Value="Combo.Descripcion" />
                    <ValidationMessage For="@(() => Combo.Descripcion)" />
                </div>

                <!-- Precio -->
                <div class="mb-3">
                    <label class="form-label"><strong>Precio</strong></label>
                    <InputNumber class="form-control" @bind-Value="Combo.Precio" />
                    <ValidationMessage For="@(() => Combo.Precio)" />
                </div>

                <!-- Estado de Venta -->
                <div class="mb-3">
                    <label class="form-label"><strong>Vendido</strong></label>
                    <InputCheckbox class="form-check-input" @bind-Value="Combo.Vendido" />
                </div>

                <!-- Detalles del Combo -->
                <div class="border border-success p-3 mt-3">
                    <h5>Detalles del Combo</h5>

                    <!-- Selección de artículo y cantidad -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label"><strong>Artículo</strong></label>
                            <InputSelect class="form-control form-select" @bind-Value="DetalleSeleccionado.ArticuloId">
                                <option value="0">-- Seleccione un artículo --</option>
                                @foreach (var articulo in ListaArticulos)
                                {
                                    <option value="@articulo.ArticuloId">@articulo.Descripcion</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => DetalleSeleccionado.ArticuloId)" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label"><strong>Cantidad</strong></label>
                            <InputNumber class="form-control" @bind-Value="DetalleSeleccionado.Cantidad" min="1" />
                            <ValidationMessage For="@(() => DetalleSeleccionado.Cantidad)" />
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button type="button" class="btn btn-outline-primary w-100" @onclick="AgregarDetalle">
                                Agregar
                            </button>
                        </div>
                    </div>

                    <!-- Tabla de detalles -->
                    <hr />
                    <table class="table table-light">
                        <thead class="table table-striped">
                            <tr class="text-center">
                                <th>Artículo</th>
                                <th>Cantidad</th>
                                <th>Costo</th>
                                <th>Remover</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in Combo.CombosDetalles)
                            {
                                <tr>
                                    <td>@ListaArticulos.FirstOrDefault(a => a.ArticuloId == detalle.ArticuloId)?.Descripcion</td>
                                    <td>@detalle.Cantidad</td>
                                    <td>@detalle.Costo</td>
                                    <td>
                                        <button type="button" class="btn btn-outline-danger bi bi-trash"
                                                @onclick="() => RemoverDetalle(detalle)">
                                            Remover
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Footer -->
            <div class="card-footer text-center mt-2">
                <a href="/Combos/Index" class="btn btn-secondary">
                    <span class="bi bi-arrow-left"></span> Volver
                </a>
                <button type="submit" class="btn btn-primary bi bi-pencil"> Actualizar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public int id { get; set; }

    public Combos Combo { get; set; } = new Combos();
    public CombosDetalle DetalleSeleccionado { get; set; } = new CombosDetalle();
    public List<Articulos> ListaArticulos { get; set; } = new();
    public List<ToastMessage> messages { get; set; } = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        Combo = await combosService.ObtenerPorId(id);
        ListaArticulos = await combosDetalleService.ListaArticulos();
        // Asegurarse de traer los detalles del combo
        Combo.CombosDetalles = await combosDetalleService.ObtenerDetallesPorComboId(id);
    }

    public void AgregarDetalle()
    {
        if (DetalleSeleccionado.ArticuloId == 0 || DetalleSeleccionado.Cantidad <= 0)
        {
            ShowMessage(ToastType.Danger, "Error", "Debe seleccionar un artículo y cantidad válida.");
            return;
        }

        var articuloSeleccionado = ListaArticulos.FirstOrDefault(a => a.ArticuloId == DetalleSeleccionado.ArticuloId);
        if (articuloSeleccionado == null)
        {
            ShowMessage(ToastType.Danger, "Error", "Artículo no encontrado.");
            return;
        }

        Combo.CombosDetalles.Add(new CombosDetalle
            {
                ArticuloId = DetalleSeleccionado.ArticuloId,
                Cantidad = DetalleSeleccionado.Cantidad,
                Costo = articuloSeleccionado.Costo * DetalleSeleccionado.Cantidad, // Multiplicar cantidad por costo
            });

        DetalleSeleccionado = new CombosDetalle();
    }

    public void RemoverDetalle(CombosDetalle detalle)
    {
        Combo.CombosDetalles.Remove(detalle);
    }

    public async Task Actualizar()
    {
        var paso = await combosService.Modificar(Combo);
        if (paso != null)
        {
            ShowMessage(ToastType.Success, "Éxito", "El combo ha sido actualizado.");
            navigationManager.NavigateTo("/Combos/Index");
        }
        else
        {
            ShowMessage(ToastType.Danger, "Error", "Hubo un problema al actualizar el combo.");
        }
    }

    private void ShowMessage(ToastType toastType, string title, string message)
    {
        messages.Add(new ToastMessage
            {
                Type = toastType,
                Title = title,
                Message = message,
                HelpText = $"{DateTime.Now}"
            });
    }
}
